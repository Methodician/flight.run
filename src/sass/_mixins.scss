// Clearfix mixin
@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

// Cool little opactiy mixin that accounts for IE8.
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity = $opacity-ie); //IE8
}

// An absolutle/relative/fixed postion mixin
@mixin position($position, $args) {
  @each $o in top right bottom left {
    $i: index($args, $o);
    @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number {
      #{$o}: nth($args, $i + 1);
    }
  }
  position: $position;
}

// Positioning helpers
@mixin absolute($args: '') {
  @include position(absolute, $args);
}

@mixin fixed($args: '') {
  @include position(fixed, $args);
}

@mixin relative($args: '') {
  @include position(relative, $args);
}

// Mixin for converting pixels to REM's, might use later in the project if fonts aren't scaling right between desktop and mobile
@mixin font-size($size, $base: 16) {
  font-size: $size; // fallback for old browsers
  font-size: ($size / $base) * 1rem;
}

// Mixin for MQ's, I need to make some modifcations to this one as I go but it should make scss files look ALOT cleaner.
@mixin screen($size) {
  $lg-desktop: "(max-width: 1440px)";
  $md-desktop: "(max-width: 1260px)";
  $desktop: "(max-width: 1024px)";
  $tablet: "(min-width: 768px) and (max-width: 935px)";
  $mobile: "(max-width: 767px)";
  $xs-mobile: "(min-width: 476px) and (max-width: 766px)";
  $xs: "(max-width: 475px)";
  @if $size == lg-desktop {
    @media only screen and #{$lg-desktop} {
      @content;
    }
  }
  @else if $size == md-desktop {
    @media only screen and #{$md-desktop} {
      @content;
    }
  }
  @else if $size == desktop {
    @media only screen and #{$desktop} {
      @content;
    }
  }
  @else if $size == tablet {
    @media only screen and #{$tablet} {
      @content;
    }
  }
  @else if $size == mobile {
    @media only screen and #{$mobile} {
      @content;
    }
  }
  @else if $size == xs-mobile {
    @media only screen and #{$xs-mobile} {
      @content;
    }
  }
  @else if $size == xs {
    @media only screen and #{$xs} {
      @content;
    }
  }
  @else {
    @media only screen and #{$size} {
      @content;
    }
  }
}

// Mixin for height and width of containers
@mixin size(
  $width,
  $height: $width
) {
  @if _is-size($height) {
    height: $height;
  } @else {
    @error "`#{$height}` is not a valid length for the `$height` argument " +
           "in the `size` mixin.";
  }

  @if _is-size($width) {
    width: $width;
  } @else {
    @error "`#{$width}` is not a valid length for the `$width` argument " +
           "in the `size` mixin.";
  }
}